





  

<Graphics file: /home/sanjak/ARC1_Sec_Docs/tex/ng-logo.png>
     



NORDUGRID


   






 NORDUGRID-TECH-16



 







 Security Infrastructure of ARC1

 



 Paper subtitle






  Weizhong Qiang

weizhongqiang@gmail.com
, Aleksandr Konstantinov

aleks@fys.uio.no
 





Table of Contents

    Chapter 1 Introduction
    Chapter 2 Security architecture in HED: SecHandlers and PDP
    Chapter 3 Policy Evaluation engine
        3.1 ArcPDP Policy Evaluator
    Chapter 4 Secuirty Attributes
        4.1 Infrastructure
        4.2 Available collectors
            4.2.1 TCP
            4.2.2 TLS
            4.2.3 HTTP
            4.2.4 SOAP
    Chapter 5 Delegation Restrictions
        5.1 Delegation Architecture
        5.2 Delegation Collector
        5.3 Delegation PDP
    Chapter 6 Schemas and descriptions
        6.1 Policy
        6.2 Request
        6.3 ArcPDP configuration
        6.4 DelegationPDP configuration
        6.5 Delegation interface
        Policy
        Request
        Delegation Policy


 

Introduction<sec:introduction>

This document describes Security Infractructure of ARC1 
middleware.

Security architecture in HED: SecHandlers and PDP<sec:architecture>

Policy Evaluation engine<sec:policy_engine>

3.1 ArcPDP Policy Evaluator<sec:policy_evaluator>

Secuirty Attributes<sec:sec_attr>

4.1 Infrastructure<sec:sec_attr_infrastructure>

Security Attributes represent security related 
information inside HED framework and store information 
representing various aspects needed to perform 
authorization decison - identity of client, requested 
action, targeted resource, constraint policies. 

Each kind of Security Attribute is represented by own 
class inherited from parent SecAttr class 
<arc/message/SecAttr.h>. Each Security Attribute stores 
it's information in internal format and is capable to 
export it to one of predefined formats using Export() 
method. Currently only supported format is Arc 
Policy/Request XML document.

Collectors of Security Attributes instantiate 
corresponding classes and link them to Secuirity 
Attributes containers - MessageAuth 
<arc/message/MessageAuth.h> and MessageAuthContext 
<arc/message/Message.h> storing collected attributes 
per request and per session correspondingly. Each 
attribute is assigned a name. Current implementations 
of Security Attributes Collectors are either integrated 
into existing MCCs or implemented as separate 
SecHandler plugins. See Section [sec:sec_attr_collectors] for available 
Collectors and corresponding Security Attributes. 

Note for service developers: Services may implement own 
authorization algorithms. But they may use Security 
Atributes as well by providing instances of classes 
inherited from SecAttr and running them through either 
configured or hardcoded processors/PDPs.

Processors of Security Attributes are implemented as 
Policy Decision Point components. Currently there are 2 
PDP components available:

* ArcPDP makes use of Security Attributes containing 
  identities of client, resource and requested action. 
  It evaluates either all or selected set of attributes 
  against specified Policy documents thus making it 
  possible to enforce policies defined/selected by 
  service providers. 

* DelegationPDP is described below in Section [sec:delegation_pdp].

4.2 Available collectors<sec:sec_attr_collectors>

Here Security Attribute collectors distributed as part 
of ARC1 are described except those used for Delegation 
Restrictions. Those are described in Section [sec:delegation].

4.2.1 TCP

Information is collected inside TCP MCC. Security 
Attribute is stored under name 'TCP' and exports ARC 
Request with following attributes:

+---------------------+---------------------------------------------------------------------+------------------------------+
|     

Element       |                           

AttributeId                             |          

Content           |
+---------------------+---------------------------------------------------------------------+------------------------------+
+---------------------+---------------------------------------------------------------------+------------------------------+
|     

Resource      | 

http://www.nordugrid.org/schemas/policy-arc/types/localendpoint   | 

service_ip[:service_port]  |
+---------------------+---------------------------------------------------------------------+------------------------------+
| 

SubjectAttribute  | 

http://www.nordugrid.org/schemas/policy-arc/types/remoteendpoint  |  

client_ip[:client_port]   |
+---------------------+---------------------------------------------------------------------+------------------------------+


4.2.2 TLS

Information is collected inside TLS MCC. Generated 
Security Attribute class exports ARC Request with 
following attributes:

+---------------------+-------------------------------------------------------------------+-------------------------------------------------------------+
|     

Element       |                          

AttributeId                            |                          

Content                          |
+---------------------+-------------------------------------------------------------------+-------------------------------------------------------------+
+---------------------+-------------------------------------------------------------------+-------------------------------------------------------------+
| 

SubjectAttribute  |    

http://www.nordugrid.org/schemas/policy-arc/types/tls/ca     | 

Subject of signer of first certificate in client's chain  |
+---------------------+-------------------------------------------------------------------+-------------------------------------------------------------+
| 

SubjectAttribute  |  

http://www.nordugrid.org/schemas/policy-arc/types/tls/chain    | 

Subject of certificate in client's chain - multiple items |
+---------------------+-------------------------------------------------------------------+-------------------------------------------------------------+
| 

SubjectAttribute  | 

http://www.nordugrid.org/schemas/policy-arc/types/tls/subject   |       

Subject of last certificate in client's chain       |
+---------------------+-------------------------------------------------------------------+-------------------------------------------------------------+
| 

SubjectAttribute  | 

http://www.nordugrid.org/schemas/policy-arc/types/tls/identity  |  

Subject of last non-proxy certificate in client's chain  |
+---------------------+-------------------------------------------------------------------+-------------------------------------------------------------+


4.2.3 HTTP

Information is collected inside TLS MCC. Security 
Attribute is stored under name 'HTTP' and exports ARC 
Request with following attributes:

+-------------+------------------------------------------------------------------+----------------------------------------+
| 

Element   |                          

AttributeId                           |               

Content                |
+-------------+------------------------------------------------------------------+----------------------------------------+
+-------------+------------------------------------------------------------------+----------------------------------------+
| 

Resource  |  

http://www.nordugrid.org/schemas/policy-arc/types/http/path   | 

HTTP path without host and port part |
+-------------+------------------------------------------------------------------+----------------------------------------+
|  

Action   | 

http://www.nordugrid.org/schemas/policy-arc/types/http/method  |             

HTTP method              |
+-------------+------------------------------------------------------------------+----------------------------------------+


4.2.4 SOAP

Information is collected inside TLS MCC. Security 
Attribute is stored under name 'SOAP' and exports ARC 
Request with following attributes:

+-------------+---------------------------------------------------------------------+--------------------------------------------------------+
| 

Element   |                           

AttributeId                             |                       

Content                        |
+-------------+---------------------------------------------------------------------+--------------------------------------------------------+
+-------------+---------------------------------------------------------------------+--------------------------------------------------------+
| 

Resource  | 

http://www.nordugrid.org/schemas/policy-arc/types/soap/endpoint   |        

To element of WS-Addressing structure         |
+-------------+---------------------------------------------------------------------+--------------------------------------------------------+
|  

Action   | 

http://www.nordugrid.org/schemas/policy-arc/types/soap/operation  | 

SOAP top level element name without namespace prefix |
+-------------+---------------------------------------------------------------------+--------------------------------------------------------+
| 

Context   | 

http://www.nordugrid.org/schemas/policy-arc/types/soap/namespace  |         

Namespace of SOAP top level element          |
+-------------+---------------------------------------------------------------------+--------------------------------------------------------+


Delegation Restrictions<sec:delegation>

5.1 Delegation Architecture<sec:delegation_architectire>

In current implementation delegation is achieved 
through Identity Delegation implemented using X509 
Proxy Certificates as defined in RFC 3820. Client 
wishing to allow service to act on it's behalf provides 
Proxy Certificate to the service using Web Service 
based Delegation interface described in [sec:delegation_interface]. 

For limitinng the scope of delegated credentials along 
with usually used time constraints it is possible to 
attach Policy document to Proxy Certificate. According 
to RFC 3820 Policy is stored in ProxyPolicy extension. 
In order not to introduce new type of object Policy is 
assigned id-ppl-anyLanguage identifier. RFC 3820 allows 
any octet string associated with such object. We are 
using textual representation of ARC Policy XML document.

Each deployment implementing Delegation Restrictions 
must use dedicated Security Handler plugin (see section [sec:delegation_collector]
) to collect all Policy documents from Proxy 
Certificates used for establishing secure connection. 
Then those documents must be processed by dedicated 
Policy Decision Point plugin (see section [sec:delegation_pdp]) to make a 
final decision based on collected Policies and various 
information about client's identity and requested 
operation. Service or MCC chain supporting Delegation 
Restrictions must accept negative decision of this PDP 
as final and do not override it with any other decision 
based on other policies.

5.2 Delegation Collector<sec:delegation_collector>

This Security Attribute is collected by dedicated 
Security Handler plugin named "delegation.pdp" avaialble 
in arcpdc plugins' library. It extracts policy document 
stored inside X509 certificate proxy extension as 
defined in RFC3820 and described in Section [sec:delegation_architectire]. All proxy 
certificates in a chain provided by client are examined 
and all available policies are extracted. 

Extracted content is converted into XML document. Then 
document is checked to be of Arc Policy kind. If policy 
is not recognized as Arc Policy procedure fails and 
that causes failure of comunication.

Proxy certificates with id-ppl-inheritAll property are 
passed through and no policy document is generated for 
them. Proxies with other type of policies including 
id-ppl-independent are not accepted and generate 
immediate failure.

5.3 Delegation PDP<sec:delegation_pdp>

DelegationPDP is similar to ArcPDP described above 
except that it takes it's Policy documents directly 
from Security Attributes. Differently from Arc PDP it 
is meant to be used for enforcing policies defined by client.

Schemas and descriptions<sec:schemas>

6.1 Policy

6.2 Request

6.3 ArcPDP configuration



6.4 DelegationPDP configuration



6.5 Delegation interface<sec:delegation_interface>

Web Service delegation interface. Each ARC1 service 
wishing to accept delegated credentials implements this 
interface. Here is how delegation procedure works:

* Step 1

  - Client contacts service requesting operation 
    DelegateCredentialsInit. This operation has no arguments.

  - Service responds with 
    DelegateCredentialsInitResponse message with 
    element TokenRequest. That element contains 
    credentials request generated by service in Value. 
    Type of request is defined by attribute Format. 
    Currently only supported format is x509. Along with 
    Value service provides identifier Id which is used 
    in second step.

* Step 2

  - Client requests UpdateCredentials operation with 
    DelegatedToken argument. This element contains 
    Value with serialized delegated credentials and Id 
    which links it to first step. Delegated token 
    element may also contain multiple Reference 
    elements. Reference refers to the object which 
    these credentials should be applied to in a way 
    specific to the service. 
The DelegatedToken element 
    must also be used for delegating credentials when 
    Step 2 is combined with other operations on service.

  - Service responds with empty 
    UpdateCredentialsResponse message.



Examples:

 Policy

 Request

 Delegation Policy

Template examples

In expressions, the following operands are allowed:   

 Examples of URLs are:
 
 
 
 
  
 





 <Graphics file: /home/sanjak/ARC1_Sec_Docs/tex/ng-logo.png>
 

<fig:myfigure1>The figure shows a logo.

 

 

#!/bin/bash
#
# Init file for the NorduGrid/ARC Information System
#
# chkconfig: - 55 25
# description: NorduGrid Information system
#
# Originally based on globus-mds v0.27.
#
# Written by:
#    Anders Waananen <waananen@nbi.dk>
#    Daniel Johansson <daniel@nsc.liu.se>
#    Mattias Ellert <mattias.ellert@fysast.uu.se>
#
# description:
#   generates BDII config and starts up the BDII
#   starts up the GIIS replacement server
#   generates GIIS registration config and starts up the registration
#
# config: /etc/sysconfig/nordugrid
# config: /etc/arc.conf
#
######################################################################

### BEGIN INIT INFO
# Provides:          grid-infosys
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: grid-infosys for ARC middleware
# Description:       ldap-based grid information system for the ARC middleware
### END INIT INFO

debug_echo () {
    if test $debug -gt 0; then
        info_string="`date +'%b %d %H:%M:%S'` `hostname` `basename $0`[$$]"
        echo "${info_string} $*" >> ${infosyslog}
    fi
}

error_echo () {
    info_string="`date +'%b %d %H:%M:%S'` `hostname` `basename $0`[$$]"
    echo "${info_string} $*" >> ${infosyslog}
}

do_exit_start () {
    arg=$*
    if test $arg -gt 0; then
        echo "Information system failed to start"
    fi
    exit $*
}

do_exit_stop () {
    arg=$*
    if test $arg -gt 0; then
        echo "Information system failed to stop"
    fi
    exit $*
}
do_exit_status () {
    arg=$*
    if test $arg -gt 0; then
        echo "Information system is not running"
    fi
    exit $*
}

std_header () {
    debug_echo "Creating file: $1"
    echo '# This file was automatically generated by the grid-infosys startup script.' > $1
    echo '# Do not modify.' >> $1
    echo >> $1
}

printregldif () {

    cat <<-EOF

	# Registration "$rootdn" -> "$targetsuffix"
	dn: Mds-Vo-Op-name=register, $targetsuffix
	regtype: mdsreg2
	reghn: $reghn
	regport: $regport
	regperiod: $regperiod
	type: ldap
	hn: $hn
	port: $port
	rootdn: $rootdn
	ttl: $ttl
	timeout: $timeout
	mode: cachedump
	cachettl: $cachettl
	bindmethod: $bindmethod
	EOF
}

# Function checks if we are using a nordugrid-patched bdii Returns
# true (1) if bdii is unpatched. Returns false (0) if it is patched.
# In case it is patched, we should disable o=infosys as default.  If
# it is not patched, then keep o=infosys since plain bdii does not
# support turning this feature off.
check_if_bdii_unpatched () {
    if [ $# != 1 ]; then
        error_echo "check_bdii called with too few arguments, wanted bdii_update_file_path"
        exit 1
    fi
    bdii_update_file=$1
    grep -q "bdii_infosys" $bdii_update_file
    if [ $? -eq 0 ]; then
        debug_echo "You are using a patched version of BDII."
        debug_echo "Will default to turning off o=infosys unless specifically handled in arc.conf"
        return 0
    else
        debug_echo "Warning: You are using a pure version of BDII."
        debug_echo "Will not try to turn o=infosys off since this is not supported."
        return 1
    fi
}

######################################################################

# source function library
if [ -r  @initddir@/functions ]; then
    . @initddir@/functions
else
    success(){
        echo "        [OK]"
    }
    failure(){
        echo "        [FAIL]"
    }
fi

###############  Standard configuration  ######################

# ARC_LOCATION
ARC_LOCATION=${ARC_LOCATION:-@prefix@}
if [ ! -d "$ARC_LOCATION" ]; then
  echo "ARC_LOCATION ($ARC_LOCATION) not found"
  exit 1
fi
export ARC_LOCATION

# source the config parsing routines
. $ARC_LOCATION/@pkglibsubdir@/config_parser_compat.sh || exit $?

ARC_CONFIG=${ARC_CONFIG:-/etc/arc.conf}

if [ ! -r "$ARC_CONFIG" ]; then
    echo "ARC configuration file arc.conf was not found (usually /etc/arc.conf)"
    if [ -r "/etc/nordugrid.conf" ]; then
        echo "Fallback /etc/nordugrid.conf was found, trying to use that one"
        ARC_CONFIG="/etc/nordugrid.conf"
    else
        echo "Failed to find the fallback /etc/nordugrid.conf"
        error_echo "arc.conf was not found. If this file is in a non-standard place,"
        error_echo "  it can be set with the ARC_CONFIG environment variable"
        exit 1
    fi
fi

# Check for OpenLDAP bug existing on some RHEL4 installations and warn about it
if [ -s /etc/openldap/ldap.conf ]; then
    TLS_CACERTDIR=`cat /etc/openldap/ldap.conf | grep TLS_CACERTDIR | sed -e 's/TLS_CACERTDIR[ \t]*//g'`
    if [ "x${TLS_CACERTDIR}" != "x" ] && [ ! -d ${TLS_CACERTDIR} ]; then
        echo "TLS_CACERTDIR=${TLS_CACERTDIR} is set in /etc/openldap/ldap.conf but directory does not exist"
        echo "This is a bug in OpenLDAP, please create the directory"
	failure
        echo "Starting grid-infosys"
        exit 1
    fi
fi

# Overall defaults
RETVAL=0
prog=a-rex-grid-infosys
debug=${debug:-0}

config_set_defaults () {
    CONFIG_hostname=`hostname`
    CONFIG_port="2135"
    CONFIG_provider_loglevel=1
}

# Read arc.conf
export pkglibdir=$ARC_LOCATION/@pkglibsubdir@
config_parse_file $ARC_CONFIG || exit $?

# Check for infosys-block
if ! config_match_section infosys; then
    error_echo "Missing infosys configuration block"
    do_exit_start 1
fi

config_hide_all
config_set_defaults
config_import_section common

# These options need to come from the infosys-block, not from common
unset CONFIG_logfile
unset CONFIG_user
unset CONFIG_port

config_import_section infosys

debug=${CONFIG_debug:-$debug}

check_ownership () {
    if [ $# != 2 ]; then
        error_echo "Wrong number of arguments to check_ownership"
        do_exit_start 1
    fi
    file=$1
    user=$2

    res=$(find `dirname $file`/ -maxdepth 1 -user $user -name `basename $file`)
    if [ "x${res}" = "x" ]; then
        error_echo "ERROR: ${file} is not owned by ${user}"
        do_exit_start 1
    fi
}

get_ldap_user () {
    ldap_user=`getent passwd | grep ldap | sed 's/\([az]*\):.*/\1/g'`
    if [ ! "xldap" = "x$ldap_user" ] && [ ! "xopenldap" = "x$ldap_user" ]; then
	debug_echo "Warning, could not find ldap or openldap user and no user specified in arc.conf"
	debug_echo "resorting to using the root user."
	ldap_user=root
    fi
}



# These values may be set in arc.conf, otherwise use sensible defaults

slapd_loglevel=${CONFIG_slapd_loglevel:-0}
threads=${CONFIG_threads:-32}
providerlog=${CONFIG_providerlog:-/var/log/arc/infoprovider.log}
infosyslog=${CONFIG_logfile:-/var/log/arc/grid-infosys.log}
if [ ! -d `dirname $providerlog` ]; then
    debug_echo "Could not find directory for arc info-provider log: `dirname $providerlog`, creating it now."
    mkdir -p `dirname $providerlog`
fi
if [ ! -d `dirname $infosyslog` ]; then
    debug_echo "Could not find directory for arc infosys log:  `dirname $infosyslog`, creating it now."
    mkdir -p `dirname $infosyslog`
fi

# Get ldap user from passwd
get_ldap_user
bdii_user=${CONFIG_user:-$ldap_user}

bdii_location=${CONFIG_bdii_location:-/usr}
giis_location=${CONFIG_giis_location:-$ARC_LOCATION}

bdii_tmp_dir=${CONFIG_bdii_tmp_dir:-/var/tmp/bdii4}
bdii_var_dir=${CONFIG_bdii_var_dir:-/var/run/bdii4}
bdii_log_dir=${CONFIG_bdii_log_dir:-/var/log/arc/bdii4}
if [ ! -d $bdii_log_dir ]; then
    debug_echo "Could not find bdii log directory: $bdii_log_dir, creating it now"
    mkdir -p $bdii_log_dir
fi

bdii_slapd_conf=$bdii_var_dir/arc-slapd.conf

bdii_update_cmd=${CONFIG_bdii_update_cmd:-"/usr/sbin/bdii4-update"}
if [ ! -e $bdii_update_cmd ]; then
    error_echo "Can not find bdii4-update command at: $bdii_update_cmd."
    error_echo "Please set bdii_update_cmd in arc.conf"
    do_exit_start 1
fi

bdii_default_ldif_ng=${bdii_tmp_dir}/arc-default.ldif.pl

bdii_port_read=${CONFIG_port:-2135}
bdii_ports_write="$(( $bdii_port_read + 1 )) $(( $bdii_port_read + 2 ))"

bdii_bind="o=Grid"
bdii_search_filter='*'
bdii_search_timeout=${CONFIG_bdii_search_timeout:-300}
bdii_breathe_time=${CONFIG_bdii_breathe_time:-30}
bdii_auto_update=${CONFIG_bdii_auto_update:-no}
bdii_auto_modify=${CONFIG_bdii_auto_modify:-no}
bdii_modify_dn=${CONFIG_bdii_modify_dn:-no}
bdii_is_cache=${CONFIG_bdii_is_cache:-yes}
bdii_update_url=${CONFIG_bdii_update_url:-"http://"}
bdii_update_ldif=${CONFIG_bdii_update_ldif:-"http://"}
bdii_database=${CONFIG_bdii_database:-"bdb"}

PID_FILE=${bdii_var_dir}/bdii-update.pid

infosys_nordugrid=${CONFIG_infosys_nordugrid:-"enable"}
infosys_glue12=${CONFIG_infosys_glue12:-"disable"}

# o=infosys should be disabled by default if possible.
infosys_debug=${CONFIG_infosys_debug:-"disable"}
bdii_infosys="no"
if [ "x$infosys_debug" = "xenable" ]; then
    bdii_infosys="yes"
fi

# Check directories and permissions
if [ "x$bdii_user" = "xroot" ] ; then
    registrationlog=${CONFIG_registrationlog:-/var/log/arc/inforegistration.log}
    if [ ! -d `dirname $registrationlog` ]; then
	debug_echo "Could not find registrationlog directory: `dirname $registrationlog`, creating it now."
        mkdir -p `dirname $registrationlog`
    fi

    touch ${registrationlog}
    chown root ${registrationlog}

    touch ${providerlog}
    chown root ${providerlog}

    arc_runtime_config="/var/run/nordugrid"
    arc_runtime_exec="/var/tmp/nordugrid"
    mkdir -p ${arc_runtime_config}
    mkdir -p ${arc_runtime_exec}
    check_ownership ${arc_runtime_config} root
    check_ownership ${arc_runtime_exec} root

    check_ownership ${bdii_log_dir} root
    check_ownership ${providerlog} root
    check_ownership ${registrationlog} root

else
    registrationlog=${CONFIG_registrationlog:-/var/log/arc/${bdii_user}-inforegistration.log}
    if [ ! -d `dirname $registrationlog` ]; then
	debug_echo "Could not find registrationlog directory: `dirname $registrationlog`, creating it now."
        mkdir -p `dirname $registrationlog`
    fi

    touch ${registrationlog}
    chown ${bdii_user} ${registrationlog}
    
    touch ${providerlog}
    chown ${bdii_user} ${providerlog}

    arc_runtime_config="/var/run/${bdii_user}-nordugrid"
    arc_runtime_exec="/var/tmp/${bdii_user}-nordugrid"
    if [ -d ${arc_runtime_config} ]; then
        check_ownership ${arc_runtime_config} ${bdii_user}
    else
        mkdir -p ${arc_runtime_config}
        chown ${bdii_user} ${arc_runtime_config}
        check_ownership ${arc_runtime_config} ${bdii_user}
    fi
    if [ -d ${arc_runtime_exec} ]; then
        check_ownership ${arc_runtime_exec} ${bdii_user}
    else
        mkdir -p ${arc_runtime_exec}
        chown ${bdii_user} ${arc_runtime_exec}
        check_ownership ${arc_runtime_exec} ${bdii_user}
    fi

    check_ownership ${bdii_log_dir} ${bdii_user}
    check_ownership ${providerlog} ${bdii_user}
    check_ownership ${registrationlog} ${bdii_user}
fi

# Check for existance of core ldap schema
coreschema=$(find /etc/ -name core.schema -printf "%h/%f\n" 2>/dev/null)
if [ "x" = "x$coreschema" ]; then
    error_echo "Error, could not find ldap core schema file under /etc"
    do_exit_start 1
fi

# Check for existence of a system ldap, this command will be used by bdii
slapd_cmd=""
if [ "x" = "x$CONFIG_slapd" ]; then
    O_IFS=$IFS
    IFS=:
    for dir in $PATH; do
        if test -x "$dir/slapd"; then
            slapd_cmd="$dir/slapd"
            break
        fi
    done
    IFS=$O_IFS
else
    slapd_cmd=$CONFIG_slapd
fi

#This is the slapd command that should be used by bdii
if [ "`config_subsections infosys/index`" ]; then
    rm -f ${arc_runtime_exec}/slapd
    cat <<-EOF > ${arc_runtime_exec}/slapd
	#!/bin/sh
	LD_PRELOAD=${giis_location}/@pkglibsubdir@/arc-infoindex-slapd-wrapper.so setsid ${slapd_cmd} -d 0 "\$@" </dev/null 1>/dev/null 2>/dev/null &
	sid=\$!
	dir=\$(dirname \$2)
	echo \$sid > \$dir/slapd.pid
	EOF
    chmod +x ${arc_runtime_exec}/slapd
    bdii_slapd_cmd=${arc_runtime_exec}/slapd
else
    bdii_slapd_cmd=${slapd_cmd}
fi

if [ ! -x $slapd_cmd ]; then
    error_echo "Error, could not find ldap server binary (usually /usr/bin/slapd),"
    error_echo "please update your PATH-variable."
    do_exit_start 1
fi


# If gris modules are not compiled into slapd, we will need to add variables to the config-file.
# We use od instead of strings since that is part of core system utilities
if [ $(grep -Ec "${bdii_database}_db_init|${bdii_database}_back_db_init" "$slapd_cmd") -eq 0 ]; then

    # Guess a likely directory for ldap modules
    ldaplib=$(find /usr/lib/ -name "back_${bdii_database}.so" -printf "%h/\n" 2>/dev/null)
    if [ "x" = "x$ldaplib" ]; then
        error_echo "Error, could not find ldap libraries under /usr/lib/"
        do_exit_start 1
    fi

    # This will get written to bdii slapd.conf:
    slapd_modulepath="modulepath      $ldaplib"
    slapd_moduleload="moduleload      back_${bdii_database}"
fi

# If giis modules are not compiled into slapd, we will need to add variables to the config-file.
# We use od instead of strings since that is part of core system utilities
if [ "`config_subsections infosys/index`" ]; then
    if [ $(od -S 10 $slapd_cmd | grep -Ec "shell_db_init|shell_back_db_init") -eq 0 ]; then

        # Guess a likely directory for ldap modules
        ldaplib=${ldaplib:-$(find /usr/lib/ -name "back_shell.so" -printf "%h/\n" 2>/dev/null)}
        if [ "x" = "x$ldaplib" ]; then
            error_echo "Error, could not find ldap libraries under /usr/lib/"
            do_exit_start 1
        fi

        # This will get written to bdii slapd.conf:
        slapd_modulepath="modulepath      $ldaplib"
        slapd_moduleload_index="moduleload      back_shell"
    fi
fi



slapadd=${CONFIG_slapadd:-/usr/sbin/slapadd}

if [ ! -x $slapadd ]; then
    error_echo "slapadd command was not found"
    do_exit_start 1
fi


# If we are running on an unpatched BDII, handle it gracefully by
# having o=infosys enabled.
check_if_bdii_unpatched $bdii_update_cmd
if [ $? -gt 0 ]; then
    infosys_debug=enable
    bdii_infosys=yes
fi

resource_location=""
resource_latitude=""
resource_longitude=""
cpuscalingreferencesi00=""
processorotherdescription=""
gluesiteweb=""
gluesiteuniqueid=""

if [ "x$infosys_glue12" = "xenable" ]; then

    if ! config_match_section infosys/glue12 ; then
        error_echo "Error: infosys_glue12 is set to enable, but infosys/glue12 block is missing."
        do_exit_start 1
    fi

    config_import_section infosys/glue12
    resource_location=${CONFIG_resource_location}
    resource_latitude=${CONFIG_resource_latitude}
    resource_longitude=${CONFIG_resource_longitude}
    cpuscalingreferencesi00=${CONFIG_cpu_scaling_reference_si00}
    processorotherdescription=${CONFIG_processor_other_description}
    gluesiteweb=${CONFIG_glue_site_web}
    gluesiteuniqueid=${CONFIG_glue_site_unique_id}

    if [ "x$resource_location" = "x" ]; then
        error_echo "If infosys_glue12 is enabled, then resource_location must be set."
        error_echo "It should be set to a free-form string describing the location,"
        error_echo "for example: 'Kastrup, Denmark'"
        do_exit_start 1
    fi
    if [ "x$resource_latitude" = "x" ]; then
        error_echo "If infosys_glue12 is enabled, then resource_latitude must be set."
        error_echo "It should be set to the latitude for the location,"
        error_echo "for example: '55.75000'"
        do_exit_start 1
    fi
    if [ "x$resource_longitude" = "x" ]; then
        error_echo "If infosys_glue12 is enabled, then resource_longitude must be set."
        error_echo "It should be set to the longitude for the location,"
        error_echo "for example: '12.41670'"
        do_exit_start 1
    fi
    if [ "x$cpuscalingreferencesi00" = "x" ]; then
        error_echo "If infosys_glue12 is enabled, then cpu_scaling_reference_si00 must be set."
        error_echo "It should be set to the SI00 value,"
        error_echo "for example: '2400'"
        exit 1
    fi
    if [ "x$processorotherdescription" = "x" ]; then
        error_echo "If infosys_glue12 is enabled, then processor_other_description must be set."
        error_echo "It should be set to a value like in the example,where cores is the average number"
        error_echo "of cores in the machine"
        error_echo "for example: 'Cores=3,Benchmark=9.8-HEP-SPEC06'"
        exit 1
    fi
    if [ "x$gluesiteweb" = "x" ]; then
        error_echo "If infosys_glue12 is enabled, then glue_site_web must be set."
        error_echo "It should be set to a url for the website belonging to the institution holding the resource,"
        error_echo "for example: 'http://www.ndgf.org'"
        exit 1
    fi
    if [ "x$gluesiteuniqueid" = "x" ]; then
        error_echo "If infosys_glue12 is enabled, then glue_site_unique_id must be set."
        error_echo "It should be set to a unique id to the resource, this should be entered into the GocDb"
        error_echo "for example: 'NDGF-T1'"
        exit 1
    fi

fi

# bdii-update.conf is put into nordugrid runtime directory
bdii_update_conf=${CONFIG_bdii_update_conf:-$arc_runtime_config/bdii-update.conf}
# bdii.conf is put into nordugrid runtime directory
# together with other temporary files, needs to be exported so bdii can start
BDII_CONF=${CONFIG_bdii_conf:-$arc_runtime_config/bdii.conf}
export BDII_CONF

giis_fifo=${CONFIG_giis_fifo:-$arc_runtime_exec/giis-fifo}

# Call with: create_bdii_conf bdii_dir var_dir slapd_conf default_ldif port_read ports_write
# Will create bdii.conf file in /var/run/nordugrid/bdii.conf
create_bdii_conf () {
    if [ $# != 7 ]; then
        error_echo "Wrong number of arguments to create_bdii_conf"
        error_echo "Arguments were: $*"
        do_exit_start 1
    fi
    bdii_location=$1
    bdii_var_dir=$2
    bdii_slapd_conf=$3
    bdii_default_ldif=$4
    bdii_port_read=$5
    bdii_ports_write="$6 $7"

    rm -f ${BDII_CONF}
    std_header ${BDII_CONF}
    cat <<-EOF >> ${BDII_CONF}
	BDII_DIR=$bdii_location
	BDII_VAR_DIR=$bdii_var_dir
	BDII_LOG_DIR=$bdii_log_dir
	BDII_UPDATE_CONF=$bdii_update_conf
	BDII_SLAPD_CONF=$bdii_slapd_conf
	BDII_DEFAULT_LDIF=$bdii_default_ldif

	BDII_PORT_READ=$bdii_port_read
	BDII_PORTS_WRITE="$bdii_ports_write"
	BDII_USER=$bdii_user
	BDII_BIND=$bdii_bind
	BDII_SEARCH_FILTER=$bdii_search_filter
	BDII_SEARCH_TIMEOUT=$bdii_search_timeout
	BDII_BREATHE_TIME=$bdii_breathe_time
	BDII_AUTO_UPDATE=$bdii_auto_update
	BDII_AUTO_MODIFY=$bdii_auto_modify
	BDII_MODIFY_DN=$bdii_modify_dn
	BDII_IS_CACHE=$bdii_is_cache
	BDII_UPDATE_URL=$bdii_update_url
	BDII_UPDATE_LDIF=$bdii_update_ldif
	BDII_INFOSYS=$bdii_infosys
	SLAPD=$bdii_slapd_cmd
	SLAPADD=$slapadd
	SLAPD_DEBUG_LEVEL=0
	EOF
}

# Call with: create_bdii_update_conf bdii_dir ldif_generator_file_ng ldif_generator_file_glue
# Will create file /var/run/nordugrid/bdii-update.conf
create_bdii_update_conf () {
    if [ $# != 3 ]; then
        error_echo "Wrong number of arguments to create_bdii_update_conf"
        error_echo "Arguments were: $*"
        do_exit_start 1
    fi
    bdii_location=$1
    ldif_generator_file_ng=$2
    ldif_generator_file_glue=$3

    rm -f ${bdii_update_conf}
    std_header ${bdii_update_conf}

    if [ "x$infosys_nordugrid" = "xenable" ]; then
        echo "ARC-PROVIDER file://${ldif_generator_file_ng}" >> \
            ${bdii_update_conf}
    fi
    if [ "x$infosys_glue12" = "xenable" ]; then
        echo "GLUE-PROVIDER file://${ldif_generator_file_glue}" >> \
            ${bdii_update_conf}
    fi
}

# Call with: create_arc_slapd_conf bdii_dir bdii_slapd_conf_file
# Will create file $bdii_slapd_conf, normally located at:
# $bdii_var_dir/arc-slapd.conf
create_arc_slapd_conf () {
    if [ $# != 2 ]; then
        error_echo "Wrong number of arguments to create_arc_slapd_conf"
        error_echo "Arguments were: $*"
        do_exit_start 1
    fi
    bdii_location=$1
    bdii_slapd_conf=$2

    for i in "/etc/bdii4/BDII.schema" \
             "${bdii_location}/etc/BDII.schema" \
             "$ARC_LOCATION/@pkgdatasubdir@/ldap-schema/BDII.schema"; do

        if [ -r $i ]; then
            bdii_schema=$i
            break
        fi
    done

    rm -f $bdii_slapd_conf
    std_header $bdii_slapd_conf
    cat <<-EOF >> $bdii_slapd_conf
	include ${coreschema}

	#bdii specific schemas
	include $bdii_schema

	#nordugrid specific schemas
	include $ARC_LOCATION/@pkgdatasubdir@/ldap-schema/nordugrid.schema
	#glue schemas
	include $ARC_LOCATION/@pkgdatasubdir@/ldap-schema/glue-1.2/Glue-CORE.schema
	include $ARC_LOCATION/@pkgdatasubdir@/ldap-schema/glue-1.2/Glue-CE.schema
	include $ARC_LOCATION/@pkgdatasubdir@/ldap-schema/glue-1.2/Glue-CESEBind.schema

	$slapd_modulepath
	$slapd_moduleload
	$slapd_moduleload_index

	allow bind_v2

	argsfile        db_dir/slapd.args
	loglevel        $slapd_loglevel
	threads         $threads
	idletimeout     120
	sizelimit       unlimited
	timelimit       2400
	EOF
        if ! [ "`config_subsections infosys/index`" ]; then
            echo "pidfile         db_dir/slapd.pid" >> $bdii_slapd_conf
        fi
}

add_info_service () {
    if [ $# != 2 ]; then
        error_echo "Wrong number of arguments to add_info_service"
        error_echo "Arguments were: $*"
        do_exit_start 1
    fi
    suffix=$1
    rootdn=$2
    cat <<-EOF >> $bdii_slapd_conf

	# ${bdii_database} database definitions
	database        ${bdii_database}
	cachesize       150000
	dbnosync
	suffix          "$suffix"
	rootdn          "$rootdn"
	rootpw          secret
	readonly        yes
	directory       db_dir
	EOF

    if [ "x$infosys_debug" = "xenable" ]; then
    cat <<-EOF >> $bdii_slapd_conf
	# Infosys database definitions
	database        ${bdii_database}
	cachesize       150000
	dbnosync
	suffix          "o=infosys"
	rootdn          "o=infosys"
	rootpw          secret
	readonly        yes
	directory       db_dir/infosys
	EOF
    fi
}

# Call with: create_default_ldif bdii_default_ldif_file
# Will create file $bdii_default_ldif, normally located at:
# ${bdii_tmp_dir}/arc-default.ldif.pl
create_default_ldif () {
    if [ $# != 1 ]; then
        error_echo "Wrong number of arguments to create_default_ldif"
        error_echo "Arguments were: $*"
        do_exit_start 1
    fi

    bdii_default_ldif=$1

    debug_echo Creating file: $bdii_default_ldif

    cat <<-EOF > $bdii_default_ldif
	#!/usr/bin/perl

	# This file was automatically generated by grid-infosys startup script.
	# Do not modify.

	use POSIX;

	print "dn: o=Grid\n";
	print "objectClass: organization\n";
	print "o: Grid\n";
	print "\n";

	print "dn: Mds-Vo-name=local,o=Grid\n";
	print "objectClass: Mds\n";
	print "objectClass: MdsVo\n";
	print "Mds-Vo-name: local\n";
	print "Mds-validfrom: " . strftime("%Y%m%d%H%M%SZ\n", gmtime());
	print "Mds-validto: " . strftime("%Y%m%d%H%M%SZ\n", gmtime(time() + 3600));
	print "\n";

	print "dn: Mds-Vo-name=resource,o=Grid\n";
	print "objectClass: Mds\n";
	print "objectClass: MdsVo\n";
	print "Mds-Vo-name: resource\n";
	print "Mds-validfrom: " . strftime("%Y%m%d%H%M%SZ\n", gmtime());
	print "Mds-validto: " . strftime("%Y%m%d%H%M%SZ\n", gmtime(time() + 3600));
	EOF

    chmod +x $bdii_default_ldif
}

# Call with create_arc_ldif_generator bdii_tmp_dir ldif_generator_file_ng
# Will create $ldif_generator_file_ng, normally located at:
# ${bdii_tmp_dir}/arc-nordugrid-bdii-ldif
create_arc_ldif_generator () {
    if [ $# != 2 ]; then
        error_echo "Wrong number of arguments to create_arc_ldif_generator"
        error_echo "Arguments were: $*"
        do_exit_start 1
    fi

    bdii_tmp_dir=$1
    ldif_generator_file=$2

    rm -f ${ldif_generator_file}
    touch ${ldif_generator_file}
    std_header ${ldif_generator_file}

    if config_match_section cluster; then
        (
            config_hide_all
            config_set_defaults
            config_import_section common
            config_import_section infosys
            config_import_section cluster
            cachetime=${CONFIG_cachetime:-$bdii_breathe_time}

            cat <<-EOF >> ${ldif_generator_file}
		$ARC_LOCATION/@pkglibexecsubdir@/cluster.pl --valid-to $cachetime --config $ARC_CONFIG --loglevel $CONFIG_provider_loglevel --dn nordugrid-cluster-name=$CONFIG_hostname,Mds-Vo-name=local,o=Grid 2>> "$providerlog"
		EOF

            # Create entries for all queues
            for queue in `config_subsections queue`; do
                (
                    config_import_section queue/$queue
                    cachetime=${CONFIG_cachetime:-$bdii_breathe_time}

                    cat <<-EOF >> ${ldif_generator_file}
			$ARC_LOCATION/@pkglibexecsubdir@/qju.pl --valid-to $cachetime --config $ARC_CONFIG --loglevel $CONFIG_provider_loglevel --dn nordugrid-queue-name=$queue,nordugrid-cluster-name=$CONFIG_hostname,Mds-Vo-name=local,o=Grid --queue $queue 2>> "$providerlog"
			EOF
                )
            done
        )
    fi

    for se in `config_subsections se`; do
        (
            config_hide_all
            config_set_defaults
            config_import_section common
            config_import_section infosys
            config_import_section se/$se
            cachetime=${CONFIG_cachetime:-$bdii_breathe_time}

            cat <<-EOF >> ${ldif_generator_file}
		$ARC_LOCATION/@pkglibexecsubdir@/se.pl -valid-to $cachetime -config $ARC_CONFIG -dn nordugrid-se-name=$se:$CONFIG_hostname,Mds-Vo-name=local,o=Grid -se $se 2>> "$providerlog"
		EOF
        )
    done

    chmod +x ${ldif_generator_file}
}

create_registration_config_file () {
    std_header $arc_runtime_config/grid-info-resource-register.conf
    (
        config_hide_all
        config_set_defaults
        config_import_section common
        config_import_section infosys

        # Start with the Cluster registration blocks
        for p in `config_subsections infosys/cluster/registration`; do
        (
            config_import_section infosys/cluster/registration/$p

            targetsuffix=${CONFIG_targetsuffix:-"Mds-Vo-name=$p,o=Grid"}
            reghn=${CONFIG_targethostname:-"targethostname.not.set"}
            regport=${CONFIG_targetport:-2135}
            hn=${CONFIG_registranthostname:-$CONFIG_hostname}
            port=${CONFIG_registrantport:-$CONFIG_port}
            rootdn=${CONFIG_registrantsuffix:-"nordugrid-cluster-name=$hn,Mds-Vo-name=local,o=Grid"}
            regperiod=${CONFIG_regperiod:-120}
            ttl=${CONFIG_ttl:-$(( $regperiod * 2 ))}
            timeout=${CONFIG_timeout:-45}
            cachettl=${CONFIG_cachettl:-0}
            sizelimit=${CONFIG_sizelimit:-0}
            bindmethod=${CONFIG_bindmethod:-ANONYM-ONLY}

            debug_echo "Cluster Tree on $hn:$port/$rootdn REGISTERS to $reghn:$regport/$targetsuffix"
            printregldif >> $arc_runtime_config/grid-info-resource-register.conf

        )
        done

        # Now process the SE registration blocks
        for seentry in `config_subsections infosys/se`; do
        (
            config_import_section infosys/se
            CONFIG_name=
            config_import_section se/$seentry
            sename=${CONFIG_name:-$seentry}
            config_import_section infosys/se/$seentry

            for p in `config_subsections infosys/se/$seentry/registration`; do
            (
                config_import_section infosys/se/$seentry/registration
                config_import_section infosys/se/$seentry/registration/$p

                targetsuffix=${CONFIG_targetsuffix:-"Mds-Vo-name=$p,o=Grid"}
                reghn=${CONFIG_targethostname:-"targethostname.not.set"}
                regport=${CONFIG_targetport:-2135}
                hn=${CONFIG_registranthostname:-$CONFIG_hostname}
                port=${CONFIG_registrantport:-$CONFIG_port}
                rootdn=${CONFIG_registrantsuffix:-"nordugrid-se-name=$sename:$hn,Mds-Vo-name=local,o=Grid"}
                regperiod=${CONFIG_regperiod:-120}
                ttl=${CONFIG_ttl:-$(( $regperiod * 2 ))}
                timeout=${CONFIG_timeout:-45}
                cachettl=${CONFIG_cachettl:-0}
                sizelimit=${CONFIG_sizelimit:-0}
                bindmethod=${CONFIG_bindmethod:-ANONYM-ONLY}

                debug_echo "$seentry SE Tree on $hn:$port/$rootdn REGISTERS to $reghn:$regport/$targetsuffix"
                printregldif >> $arc_runtime_config/grid-info-resource-register.conf

            )
            done

        )
        done # loop over SEs
    )
}

add_index_services () {
    (
        config_hide_all
        config_set_defaults
        config_import_section common
        config_import_section infosys

        # Defaults for the Index Service slapd.conf block

        access="access to * by * write"

        for vo in `config_subsections infosys/index`; do
        (
            debug_echo "Enabling the Index Service $vo"

            CONFIG_name=
            config_import_section infosys/index/$vo
            indexname=${CONFIG_name:-$vo}

            cat <<-EOF >> $bdii_slapd_conf

		# Index Service: $vo
		database        shell
		suffix          "Mds-Vo-name=$indexname,o=Grid"
		bind            $giis_location/sbin/arc-infoindex-relay $giis_fifo
		add             $giis_location/sbin/arc-infoindex-relay $giis_fifo
		search          $giis_location/sbin/arc-infoindex-relay $giis_fifo
		$access
		EOF

            # Registrations of the Index Services

            # grid-info-resource-register.conf

            for r in `config_subsections infosys/index/$vo/registration`; do
            (
                config_import_section infosys/index/$vo/registration/$r

                targetsuffix=${CONFIG_targetsuffix:-"Mds-Vo-name=$r,o=Grid"}
                reghn=$CONFIG_targethostname
                regport=${CONFIG_targetport:-2135}
                hn=${CONFIG_registranthostname:-$CONFIG_hostname}
                port=${CONFIG_registrantport:-$CONFIG_port}
                rootdn=${CONFIG_registrantsuffix:-"Mds-Vo-name=$indexname,o=Grid"}
                regperiod=${CONFIG_regperiod:-120}
                ttl=${CONFIG_ttl:-$(( $regperiod * 2 ))}
                timeout=${CONFIG_timeout:-120}
                cachettl=${CONFIG_cachettl:-0}
                sizelimit=${CONFIG_sizelimit:-0}
                bindmethod=${CONFIG_bindmethod:-ANONYM-ONLY}

                if [ -n "$targetsuffix" -a -n "$reghn" ]; then
                    printregldif >> $arc_runtime_config/grid-info-resource-register.conf
                    debug_echo "Index Service $hn:$port/$rootdn REGISTERS to $reghn:$regport/$targetsuffix"
                fi

            )
            done

        )
        done
    )
}

# Call with create_glue_ldif_generator bdii_tmp_dir ldif_generator_file_ng ldif_generator_file_glue
# Will create $ldif_generator_file_glue, normally located at:
# ${bdii_tmp_dir}/arc-glue-bdii-ldif
create_glue_ldif_generator () {
    if [ $# != 3 ]; then
        error_echo "Wrong number of arguments to create_glue_ldif_generator"
        error_echo "Arguments were: $*"
        do_exit_start 1
    fi

    bdii_tmp_dir=$1
    ldif_generator_file_ng=$2
    ldif_generator_file_glue=$3

    rm -f ${ldif_generator_file_glue}
    touch ${ldif_generator_file_glue}
    std_header ${ldif_generator_file_glue}

    # We use , instead of / here to allow for / in path, resource_location though, can contain commas..
    sed "s,\$LDIF_GENERATOR_FILE_NG,$ldif_generator_file_ng,g;
         s/\$LOC/\"$resource_location\"/g;
         s/\$LAT/$resource_latitude/g;
         s/\$LONG/$resource_longitude/g;
         s/\$CPUSCALINGREFERENCESI00/$cpuscalingreferencesi00/g;
         s/\$PROCESSOROTHERDESCRIPTION/$processorotherdescription/g;
         s,\$GLUESITEWEB,$gluesiteweb,g;
         s,\$BDIIPORT,$bdii_port_read,g;
         s,\$GLUESITEUNIQUEID,$gluesiteuniqueid,g;
        " $ARC_LOCATION/@pkglibsubdir@/glue-generator.pl > ${ldif_generator_file_glue}

    chmod +x ${ldif_generator_file_glue}
}

# Function to create a directory, removes it if it exist and then
# creates it and checks permissions.
# Call with create_directory dir context
create_directory () {
    if [ $# != 2 ]; then
        error_echo "Wrong number of arguments to create_directory"
        error_echo "Arguments were: $*"
        do_exit_start 1
    fi

    dir=$1
    string=$2
    id=`id -u`

    if [ ${#dir} -le "1" ]; then
        error_echo "$string error: directory string: $dir is too short"
        do_exit_start 1
    fi

    if [ -e ${dir} ]; then
        rm -rf $dir
    fi

    #set rights
    umask 0022
    mkdir -p ${dir}

    #check ownership just to be sure
    if [ ! -O ${dir} ]; then
        error_echo "$string error: $dir should be owned by uid:$id"
        do_exit_start 1
    fi
}

# A call to this function will create necessary config-files for bdii to be used
create_bdii_config_files () {

    # Create bdii.conf
    # Call with: create_bdii_conf bdii_dir var_dir slapd_conf default_ldif port_read ports_write
    create_bdii_conf $bdii_location $bdii_var_dir $bdii_slapd_conf $bdii_default_ldif_ng $bdii_port_read $bdii_ports_write

    # Create bdii-update.conf - only points to scripts for generating
    # ldifs, depending on the $infosys_nordugrid and $infosys_glue12 variables,
    # different lines will be written to bdii-update.conf
    # Call with: create_bdii_update_conf bdii_dir ldif_generator_file_ng ldif_generator_file_glue
    create_bdii_update_conf $bdii_location ${bdii_tmp_dir}/arc-nordugrid-bdii-ldif ${bdii_tmp_dir}/arc-glue-bdii-ldif

    # Create arc-slapd.conf, will be copied to dirs where slapd is run
    # Call with: create_arc_slapd_conf bdii_dir bdii_slapd_conf_file
    create_arc_slapd_conf $bdii_location $bdii_slapd_conf

    # Create bdii default ldif
    # Call with: create_default_ldif bdii_default_ldif_file
    create_default_ldif $bdii_default_ldif_ng

    # Create arc-nordugrid-bdii-ldif, generates ldif-files for nordugrid schema.
    if [ "x$infosys_nordugrid" = "xenable" ]; then
        # Call with create_arc_ldif_generator bdii_tmp_dir ldif_generator_file
        create_arc_ldif_generator $bdii_tmp_dir ${bdii_tmp_dir}/arc-nordugrid-bdii-ldif
    fi

    # Create arc-glue-bdii-ldif, generates ldif-files for glue schema
    if [ "x$infosys_glue12" = "xenable" ]; then
        # Call with create_glue_ldif_generator bdii_tmp_dir ldif_generator_file_ng ldif_generator_file_glue
        create_glue_ldif_generator $bdii_tmp_dir ${bdii_tmp_dir}/arc-nordugrid-bdii-ldif ${bdii_tmp_dir}/arc-glue-bdii-ldif
    fi

    # Resource (cluster or SE) registrations
    # grid-info-resource-register.conf
    create_registration_config_file

    # Index Services: generating the config files
    add_index_services

    # Local Information Service
    add_info_service $bdii_bind $bdii_bind

}

# Print some information about where to find bdii logs
notify_about_bdii () {
    debug_echo "Nordugrid ARC as of version 0.8 uses BDII for"
    debug_echo "information handling instead of the globus based infosys"
    debug_echo "that was used before. The change is backwards compatible."
    debug_echo "BDII writes logs in two places, these might be worth checking"
    debug_echo "if you encounter any problems."
    debug_echo " ${bdii_var_dir}/tmp/stderr.log"
    debug_echo " ${bdii_log_dir}"
}

start () {

    #Check to see if the process is already started
    if [  -f "$PID_FILE" ] ; then
        status > /dev/null
        if [ $RETVAL = 2 ]; then
            echo "Stale lock file, removing ..."
            rm -f "$PID_FILE"
        else
            failure
            echo "grid-infosys already running" 1>&2
            exit 1
        fi
    fi

    # Print help-message about new logs
    notify_about_bdii
    
    # Create directories for storing temporary scripts and check permissions etc
    create_directory $bdii_var_dir "BDII_VAR_DIR"
    create_directory $bdii_tmp_dir "BDII_TMP_DIR"

    create_bdii_config_files

    # Finished with the config file generation.
    # Time to start the whole infosys

    # If index-server configured, start it
    if [ "`config_subsections infosys/index`" ]; then
        $giis_location/sbin/arc-infoindex-server -c $ARC_CONFIG -f $giis_fifo
    fi

    # Start BDII

    pass=`/usr/bin/mkpasswd -s 0 2> /dev/null` || pass=$RANDOM$RANDOM
    pass=${pass//\//x}

    for port in $bdii_ports_write; do

        umask 022

        #Make the database directories.
        dir=${bdii_var_dir}/${port}
        rm -rf "$dir"
        mkdir -p "$dir"
        mkdir -p "$dir/infosys"

        conf=$dir/bdii-slapd.conf

        cp /etc/bdii4/DB_CONFIG $dir
        cp /etc/bdii4/DB_CONFIG $dir/infosys

        # ensure the configuration file is not world-readable,
        # as it contains the slapd database password

        (umask 077; > $conf)

        if [ ! -f ${bdii_slapd_conf} ]; then
            failure
            echo "Can not find slapd file: ${bdii_slapd_conf}" 1>&2
            do_exit_start 1
        fi

        cat ${bdii_slapd_conf} | sed "s/secret/${pass}/g" | sed "s#db_dir#${dir}#g"> $conf

        # Touch the pid files.
        touch "$dir/slapd.pid"
    done

    chown -R $bdii_user "${bdii_var_dir}/"

    echo -n "Starting grid-infosys"

    su -m $bdii_user -c "(
        export LANG=C

        #This is to make infoindex relocateable.
        export ARC_LDAPLIB_SHELL=$ldaplib/back_shell.so

        # It should be irrelevant where you are standing where you start the script
        cd /

        ${bdii_update_cmd} ${BDII_CONF} &
        echo \$! > $PID_FILE
    )"

    if [ $? = 0 ]; then
        success
        echo
    else
        failure
        echo
    fi

    # Info registration
    if [ "x$infosys_nordugrid" = "xenable" ]; then
        $ARC_LOCATION/@pkglibexecsubdir@/grid-info-soft-register -log $registrationlog -f $arc_runtime_config/grid-info-resource-register.conf -p `cat $bdii_var_dir/bdii-update.pid` 1>/dev/null 2>/dev/null &
    fi
}

stop () {
    # Stop GRIS

    #Check to see if the process is already stopped
    if [ ! -f "$PID_FILE" ] ; then
        failure
        echo "Stopping grid-infosys"
        RETVAL=1
        return
    fi

    #Try to term all slapd processes.
    su -m $bdii_user -c 'killall -15 bdii4-fwd bdii4-update' 2>/dev/null
    for port in $bdii_ports_write; do
        if [ -s ${bdii_var_dir}/${port}/slapd.pid ]; then
            su -m $bdii_user -c "kill -15 $(cat ${bdii_var_dir}/${port}/slapd.pid)" 2>/dev/null
        fi
    done

    rm -f "$PID_FILE"

    sleep 5

    #Send kill -9 to any remaining slapd processes.
    su -m $bdii_user -c 'killall -9 bdii4-fwd bdii4-update' 2>/dev/null
    for port in $bdii_ports_write; do
        if [ -s ${bdii_var_dir}/${port}/slapd.pid ]; then
            su -m $bdii_user -c "kill -9 $(cat ${bdii_var_dir}/${port}/slapd.pid)" 2>/dev/null
        fi
    done

    RETVAL=0
    for port in $bdii_ports_write; do
        if [ -s ${bdii_var_dir}/${port}/slapd.pid ]; then
            RETVAL=1
        fi
    done
    if [ ${RETVAL} -eq 0 ]; then
        success
        echo "Stopping grid-infosys"
    else
        failure
        echo "Stopping grid-infosys"
    fi

    # Stop GIIS
    [ -p $giis_fifo ] && echo STOP > $giis_fifo

    # Clean up
    rm -rf ${bdii_var_dir}
    rm -rf ${bdii_tmp_dir}
}

status ()  {
    if [ ! -f "$PID_FILE" ] ; then
        echo "`basename $0` stopped" 1>&2
        RETVAL=1
        return
    fi

    PID=`cat "$PID_FILE"`
    ps=`ps $PID`

    bdii_update_base=$(basename $bdii_update_cmd)
    case "$ps" in
        *$bdii_update_base*)
            echo "`basename $0` OK"
            RETVAL=0
            ;;
        *)
            echo "lock file exists but PID $PID died" 1>&2
            RETVAL=2
            ;;
    esac
}

This directory contains all the services related to the ARC1 storage system.
It has the following subdirectories:

ahash     - simple currently centralized metadata store used by the Librarian
librarian - the Librarian service handling files and collection
bartender - the Bartender service providing high-level storage namespace
element   - the Shepherd service and a byteio service
gateway   - the Storage Gateway service and other services related to it
cli       - small basic CLI clients for the storage services
fuse      - FUSE interface to storage for mounting storage system

And has the following files:
client.py                       - collection of python classes which can be used to talk to the services
common.py                       - collection of python methods and classes used by more than one service
storage.service.xml.example     - an example service configuration xml for HED with HTTP Shepherd backend
storage.service.xml.3S.example  - an example service configuration xml for HED with 3 ByteIO-backed Shepherds
service.py                      - a python superclass of service classes with common features
xmltree.py                      - a python class for easy handling of simple XML structures
fakexmlnode.py                  - providing the interface of an ARC XMLNode without the ARC libraries
arc_storage_cli.py              - standalone client for the storage system (supporting HTTP transfer)

Bit more detail about the main services:
- A-Hash: it is basically a (currently centralized but later distributed)
database service which is storing 'objects', where an 'object' is any
number of key-value pairs, where the keys are itself 2-tuples. so if you
have a 'dictionary' or a 'hashtable' or that kind of stuff which is
basically a list of key-value pairs, then you can store it here with a
unique ID and later you can retrieve or change it any time

- Librarian: it is a service which stores the global filesystem, all the
metadata of the collections and files. it does not store the actual
replicas of the file, just the metadata which contain the location of
the replicas. this service knows about Logical Names and GUIDs, and can
walk the logical namespace, traversing logical names, etc. (the Librarian
uses the A-Hash as database)

- Shepherd: this service lives on a storage resource which is actually
storing the replicas of the files, and when a user wants to download or
upload a file, the actual data transfer is going directly to these
services. the Shepherds checks the health of their files, and report it
to the Librarian. they initiate replication if needed.

- Bartender: this service is the main front-end service of the storage,
the users connect to this, this provides a high-level user-friendly
interface for file and collection operations, every transfer must be
initiated by a Bartender service. it connects to Librarians to organize the
global logical namespace, it connects to Shepherds to initiate file
transfers.


Installation howto

After you've get the source code from the svn, you should run './autogen.sh' and './configure'.
The output of configure should be something like this:

[...]
Python binding:     yes (2.4)
[...]
Included components:
[...]
STORAGE service:    yes
[...]

Then you can do 'make' and 'sudo make install'.

You can use the example configuration file which is by default installed to:
    /usr/local/share/doc/arc/storage.service.xml.example

You need some working directories and a place for a logfile, e.g.:
    $ sudo mkdir /var/spool/arc; sudo chmod a+wrx /var/spool/arc
    $ sudo touch /var/log/arched.log; sudo chmod a+rw /var/log/arched.log

Or of course you can put them anywhere, just you need to change the paths in the configuration (service.xml) file.

You may add the external interface of your machine to the section where it is indicated in the configuration file:
    <!-- Change this prefix to the external interface of your machine -->
    <TURLPrefix>http://localhost:60000/httpd/</TURLPrefix>
You may replace 'localhost' with the hostname of your machine.

Then you can start the server with:
/usr/local/sbin/arched -c /usr/local/share/doc/arc/storage.service.xml.example 

Now you can use the arc_storage_cli.py python script which is by default installed to /usr/local/bin.
But you can grab this script and use it on any other machine which has no ARC installed at all.
It is a very basic command line interface, it has only one flag, the '-x', which prints the actual soap message payloads.

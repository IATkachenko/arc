This directory contains all the services related to the ARC1 storage system.
It has the following subdirectories:

ahash     - simple currently centralized metadata store used by the Librarian
librarian - the Librarian service handling files and collection
bartender - the Bartender service providing high-level storage namespace
shepherd  - the Shepherd service and a byteio service
cli       - small basic CLI clients for the storage services
fuse      - FUSE interface to storage for mounting storage system

And has the following files:
client.py                       - collection of python classes which can be used to talk to the services
common.py                       - collection of python methods and classes used by more than one storage service
storage_service.xml.example     - an example service configuration xml for HED with HTTP Shepherd backend
storage.service.xml.3S.example  - an example service configuration xml for HED with 3 ByteIO-backed Shepherds
arc_storage_cli                 - standalone client for the storage system (supporting HTTP transfer)

Bit more detail about the main services:
- A-Hash: it is basically a (currently centralized but later distributed)
database service which is storing 'objects', where an 'object' is any
number of key-value pairs, where the keys are itself 2-tuples. so if you
have a 'dictionary' or a 'hashtable' or that kind of stuff which is
basically a list of key-value pairs, then you can store it here with a
unique ID and later you can retrieve or change it any time

- Librarian: it is a service which stores the global filesystem, all the
metadata of the collections and files. it does not store the actual
replicas of the file, just the metadata which contain the location of
the replicas. this service knows about Logical Names and GUIDs, and can
walk the logical namespace, traversing logical names, etc. (the Librarian
uses the A-Hash as database)

- Shepherd: this service lives on a storage resource which is actually
storing the replicas of the files, and when a user wants to download or
upload a file, the actual data transfer is going directly to these
services. the Shepherds checks the health of their files, and report it
to the Librarian. they initiate replication if needed.

- Bartender: this service is the main front-end service of the storage,
the users connect to this, this provides a high-level user-friendly
interface for file and collection operations, every transfer must be
initiated by a Bartender service. it connects to Librarians to organize the
global logical namespace, it connects to Shepherds to initiate file
transfers.


Installation howto

The up-to-date version of this file can be found in the NorduGrid subversion repository:
http://svn.nordugrid.org/trac/nordugrid/browser/arc1/trunk/src/services/storage

In order to install these storage services, you need the HED hosting environment which can also be found in the repository:
http://svn.nordugrid.org/trac/nordugrid/browser/arc1/trunk
For dependencies and installation instructions of HED you can read this README file:
http://svn.nordugrid.org/trac/nordugrid/browser/arc1/trunk/README
or for more detail, this documentation:
http://svn.nordugrid.org/trac/nordugrid/browser/arc1/trunk/doc/ws-quick-guide/ws-quick-guide.pdf

After you've get the source code from the svn, and you have all the dependecies needed, 
you should run './autogen.sh' and './configure --prefix=PLACE_TO_INSTALL_ARC'.
The output of configure should be something like this:

[...]
Python binding:     yes (2.4)
[...]
Included components:
[...]
STORAGE service:    yes
[...]

Then you can compile it with 'make'.
After that you can install it with 'sudo make install'.

If you are using a virtual machine, you can use the default location to install.
The following instructions are for the default installation directory.

You can use the example configuration file which is by default installed to:
    /usr/local/share/doc/arc/storage_service.xml.example

You need some working directories and a place for a logfile, e.g.:
    $ sudo mkdir /var/spool/arc; sudo chmod a+wrx /var/spool/arc
    $ sudo touch /var/log/arched.log; sudo chmod a+rw /var/log/arched.log

Or of course you can put them anywhere, just you need to change the paths in the configuration (service.xml) file.

You need to put the path of the installed python services (e.g. '/usr/local/lib/pythonX.X/site-packages') to the PYTHONPATH environment variable:
    export PYTHONPATH=...

You may add the external interface of your machine to the section where it is indicated in the configuration file:
    <!-- Change this prefix to the external interface of your machine -->
    <TURLPrefix>http://localhost:60000/httpd/</TURLPrefix>
You may replace 'localhost' with the hostname of your machine.

Then you can start the server with:
/usr/local/sbin/arched -c /usr/local/share/doc/arc/storage_service.xml.example 

Now you can use the arc_storage_clithon script which is by default installed to /usr/local/bin.
But you can grab this script and use it on any other machine which has no ARC installed at all.
It is a very basic command line interface, it has only one flag, the '-x', which prints the actual soap message payloads.

You can specify the URL of the Bartender service with the ARC_BARTENDER_URL environment variable.

First we should create a root collection:
$ arc_storage_cli list /
- ARC_BARTENDER_URL environment variable not found, using http://localhost:60000/Bartender
- Calling the Bartender's list method...
- done in 0.03 seconds.
'/': not found
$ arc_storage_cli -x list /
- ARC_BARTENDER_URL environment variable not found, using http://localhost:60000/Bartender
- Calling the Bartender's list method...
Request:
<soap-env:Envelope>
    <soap-env:Body>
        <list>
            <listRequestList>
                <listRequestElement>
                    <requestID>0</requestID>
                    <LN>/</LN>
                </listRequestElement>
            </listRequestList>
            <neededMetadataList>
                <neededMetadataElement>
                    <section>entry</section>
                    <property></property>
                </neededMetadataElement>
            </neededMetadataList>
        </list>
    </soap-env:Body>
</soap-env:Envelope>

Response:
<soap-env:Envelope>
    <soap-env:Body>
        <bar:listResponse>
            <bar:listResponseList>
                <bar:listResponseElement>
                    <bar:requestID>0</bar:requestID>
                    <bar:entries></bar:entries>
                    <bar:status>not found</bar:status>
                </bar:listResponseElement>
            </bar:listResponseList>
        </bar:listResponse>
    </soap-env:Body>
</soap-env:Envelope>

- done in 0.03 seconds.
'/': not found
$ arc_storage_cli makeCollection /
- ARC_BARTENDER_URL environment variable not found, using http://localhost:60000/Bartender
- Calling the Bartender's makeCollection method...
- done in 0.05 seconds.
Creating collection '/': done

The methods can be listed with:
$ arc_storage_cli
Usage:
  arc_storage_cli <method> [<arguments>]
Supported methods: stat, make[Collection], unmake[Collection], list, move, put[File], get[File], del[File]
Without arguments, each method prints its own help.
$ arc_storage_cli move
Usage: move <sourceLN> <targetLN>

LN means Logical Name everywhere in this system, this is the path in the global namespace.
The LNs are always absolute, must start with a '/'. (or with a '<GUID>/'...)

$ arc_storage_cli list /
- ARC_BARTENDER_URL environment variable not found, using http://localhost:60000/Bartender
- Calling the Bartender's list method...
- done in 0.04 seconds.
'/': collection
    empty.

Actually you only need to type the first three character of the command:

$ arc_storage_cli lis /
- ARC_BARTENDER_URL environment variable not found, using http://localhost:60000/Bartender
- Calling the Bartender's list method...
- done in 0.04 seconds.
'/': collection
    empty.

And you can use 'ls', 'mv', 'rmdir', 'mkdir', 'rm' as well:

$ arc_storage_cli ls /
- ARC_BARTENDER_URL environment variable not found, using http://localhost:60000/Bartender
- Calling the Bartender's list method...
- done in 0.03 seconds.
'/': collection
    empty.

Let's create some sub-collections (sub-directories):
$ arc_storage_cli mkdir /tmp
- ARC_BARTENDER_URL environment variable not found, using http://localhost:60000/Bartender
- Calling the Bartender's makeCollection method...
- done in 0.06 seconds.
Creating collection '/tmp': done
$ arc_storage_cli mkdir /home
- ARC_BARTENDER_URL environment variable not found, using http://localhost:60000/Bartender
- Calling the Bartender's makeCollection method...
- done in 0.06 seconds.
Creating collection '/home': done

Let's move them:

$ arc_storage_cli mv /home /tmp
- ARC_BARTENDER_URL environment variable not found, using http://localhost:60000/Bartender
- Calling the Bartender's move method...
- done in 0.05 seconds.
Moving '/home' to '/tmp': targetexists
$ arc_storage_cli mv /home /tmp/
- ARC_BARTENDER_URL environment variable not found, using http://localhost:60000/Bartender
- Calling the Bartender's move method...
- done in 0.07 seconds.
Moving '/home' to '/tmp/': moved

Let's list them:

$ arc_storage_cli ls /
- ARC_BARTENDER_URL environment variable not found, using http://localhost:60000/Bartender
- Calling the Bartender's list method...
- done in 0.04 seconds.
'/': collection
  tmp                 <collection>
$ arc_storage_cli ls /tmp
- ARC_BARTENDER_URL environment variable not found, using http://localhost:60000/Bartender
- Calling the Bartender's list method...
- done in 0.04 seconds.
'/tmp': collection
  home                <collection>
$ arc_storage_cli ls /tmp/home
- ARC_BARTENDER_URL environment variable not found, using http://localhost:60000/Bartender
- Calling the Bartender's list method...
- done in 0.05 seconds.
'/tmp/home': collection
    empty.
$ arc_storage_cli ls / /tmp /tmp/home
- ARC_BARTENDER_URL environment variable not found, using http://localhost:60000/Bartender
- Calling the Bartender's list method...
- done in 0.08 seconds.
'/tmp': collection
  home                <collection>
'/': collection
  tmp                 <collection>
'/tmp/home': collection
    empty.

Let's upload a file:

$ cat testfile 
This is a testfile.
$ arc_storage_cli put testfile /tmp
- The size of the file is 20 bytes
- The md5 checksum of the file is 9a9dffa22d227afe0f1959f936993a80
- ARC_BARTENDER_URL environment variable not found, using http://localhost:60000/Bartender
- Calling the Bartender's putFile method...
- done in 0.04 seconds.
/tmp: LN exists
$ arc_storage_cli put testfile /tmp/
- The size of the file is 20 bytes
- The md5 checksum of the file is 9a9dffa22d227afe0f1959f936993a80
- ARC_BARTENDER_URL environment variable not found, using http://localhost:60000/Bartender
- Calling the Bartender's putFile method...
- done in 0.08 seconds.
- Got transfer URL: http://localhost:60000/httpd/d15900f5-34ee-4bba-bb10-73d60d1c0d75
- Uploading from 'testfile' to 'http://localhost:60000/httpd/d15900f5-34ee-4bba-bb10-73d60d1c0d75' with http...
Uploading 20 bytes... data sent, waiting... done.
- done in 0.0042 seconds.
'testfile' (20 bytes) uploaded as '/tmp/testfile'.

Let's get some stats:

$ arc_storage_cli stat /
- ARC_BARTENDER_URL environment variable not found, using http://localhost:60000/Bartender
- Calling the Bartender's stat method...
- done in 0.03 seconds.
'/': found
  states
    closed: 0
  entry
    type: collection
  timestamps
    created: 1210231805.48
  entries
    tmp: 51e12fab-fd3d-43ec-9bc5-17041da3f0b2
$ arc_storage_cli stat /tmp
- ARC_BARTENDER_URL environment variable not found, using http://localhost:60000/Bartender
- Calling the Bartender's stat method...
- done in 0.03 seconds.
'/tmp': found
  states
    closed: 0
  timestamps
    created: 1210231940.04
  entry
    type: collection
  parents
    0/tmp: parent
  entries
    testfile: e635a620-da69-48a3-80d6-b4f68f4aeaa5
    home: e6f5d1f0-71a8-4ea6-adc4-8b36807e5562
$ arc_storage_cli stat /tmp/testfile
- ARC_BARTENDER_URL environment variable not found, using http://localhost:60000/Bartender
- Calling the Bartender's stat method...
- done in 0.05 seconds.
'/tmp/testfile': found
  states
    checksumType: md5
    neededReplicas: 1
    size: 20
    checksum: 9a9dffa22d227afe0f1959f936993a80
  timestamps
    created: 1210232135.57
  parents
    51e12fab-fd3d-43ec-9bc5-17041da3f0b2/testfile: parent
  locations
    http://localhost:60000/Shepherd fc0d3d99-6406-4c43-b2eb-c7ec6d6ab7fe: alive
  entry
    type: file

Let's download the file:

$ arc_storage_cli get /tmp/testfile newfile
- ARC_BARTENDER_URL environment variable not found, using http://localhost:60000/Bartender
- Calling the Bartender's getFile method...
- done in 0.05 seconds.
- Got transfer URL: http://localhost:60000/httpd/dab911d0-110f-468e-b0c3-627af6e3af31
- Downloading from 'http://localhost:60000/httpd/dab911d0-110f-468e-b0c3-627af6e3af31' to 'newfile' with http...
Downloading 20 bytes... done.
- done in 0.0035 seconds.
'/tmp/testfile' (20 bytes) downloaded as 'newfile'.
$ cat newfile 
This is a testfile.

Let's remove everything:

$ arc_storage_cli unmakeCollection /tmp
- ARC_BARTENDER_URL environment variable not found, using http://localhost:60000/Bartender
- Calling the Bartender's unmakeCollection method...
- done in 0.03 seconds.
Removing collection '/tmp': collection is not empty
$ arc_storage_cli unmakeCollection /tmp/home
- ARC_BARTENDER_URL environment variable not found, using http://localhost:60000/Bartender
- Calling the Bartender's unmakeCollection method...
- done in 0.06 seconds.
Removing collection '/tmp/home': removed
$ arc_storage_cli del /tmp/testfile
- ARC_BARTENDER_URL environment variable not found, using http://localhost:60000/Bartender
- Calling the Bartender's delFile method...
- done in 0.05 seconds.
/tmp/testfile: deleted
$ arc_storage_cli rmdir /tmp
- ARC_BARTENDER_URL environment variable not found, using http://localhost:60000/Bartender
- Calling the Bartender's unmakeCollection method...
- done in 0.05 seconds.
Removing collection '/tmp': removed
$ arc_storage_cli ls /
- ARC_BARTENDER_URL environment variable not found, using http://localhost:60000/Bartender
- Calling the Bartender's list method...
- done in 0.04 seconds.
'/': collection
    empty.
$ arc_storage_cli unmakeCollection /
- ARC_BARTENDER_URL environment variable not found, using http://localhost:60000/Bartender
- Calling the Bartender's unmakeCollection method...
- done in 0.04 seconds.
Removing collection '/': removed
$ arc_storage_cli list /
- ARC_BARTENDER_URL environment variable not found, using http://localhost:60000/Bartender
- Calling the Bartender's list method...
- done in 0.04 seconds.
'/': not found

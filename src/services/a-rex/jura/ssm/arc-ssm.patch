diff -ur 2.2.1-orig/brokers.py 2.2.1-arc/brokers.py
--- 2.2.1-orig/brokers.py	2018-05-14 16:00:55.000000001 +0300
+++ 2.2.1-arc/brokers.py	2018-08-24 22:16:20.065833696 +0300
@@ -18,6 +18,9 @@
 Class to interact with a BDII LDAP server to retrieve information about 
 the stomp brokers specified in a network.
 '''
+
+from __future__ import print_function
+
 import ldap
 import logging
 
@@ -140,12 +143,12 @@
     def print_brokers(text, service, network):
         brokers = BG.get_broker_hosts_and_ports(service, network)
         # Print section heading
-        print '==', text, '=='
+        print('==', text, '==')
         # Print brokers in form 'host:port'
         for broker in brokers:
-            print '%s:%i' % (broker[0], broker[1])
+            print('%s:%i' % (broker[0], broker[1]))
         # Leave space between sections
-        print
+        print()
 
     print_brokers('SSL production brokers', STOMP_SSL_SERVICE, 'PROD')
     print_brokers('Production brokers', STOMP_SERVICE, 'PROD')
diff -ur 2.2.1-orig/crypto.py 2.2.1-arc/crypto.py
--- 2.2.1-orig/crypto.py	2018-05-14 16:00:55.000000001 +0300
+++ 2.2.1-arc/crypto.py	2018-09-05 13:44:16.186307157 +0300
@@ -57,7 +57,7 @@
     try:
         cert = _from_file(certpath)
         key = _from_file(keypath)
-    except IOError, e:
+    except IOError as e:
         log.error('Could not find cert or key file: %s', e)
         return False
     
@@ -101,7 +101,7 @@
 
         return signed_msg
     
-    except OSError, e:
+    except OSError as e:
         log.error('Failed to sign message: %s', e)
         raise CryptoException('Message signing failed.  Check cert and key permissions.')
 
@@ -289,7 +289,7 @@
     '''
     Return the certificate subject's DN, in legacy openssl format.
     '''
-    p1 = Popen(['openssl', 'x509', '-noout', '-subject'],
+    p1 = Popen(['openssl', 'x509', '-noout', '-subject', '-nameopt', 'oneline'],
                stdin=PIPE, stdout=PIPE, stderr=PIPE)
     
     subject, error = p1.communicate(certstring)
@@ -298,7 +298,18 @@
         log.error(error)
         raise CryptoException('Failed to get subject: %s' % error)
     
-    subject = subject.strip()[9:] # remove 'subject= ' from the front
+    subject = subject.strip()[8:] # remove 'subject=' from the front
+    subject = subject.lstrip() # even if there is space after subject=
+    subject = subject.split(', ')
+    
+    for idx in range(len(subject)):
+        el = subject[idx].split(' = ')
+        el = '='.join(el)
+        subject.pop(idx)
+        subject.insert(idx,el)
+    
+    subject = '/' + '/'.join(subject)
+    
     return subject
 
 
diff -ur 2.2.1-orig/sender.cfg 2.2.1-arc/sender.cfg
--- 2.2.1-orig/sender.cfg	2018-05-14 16:00:55.000000001 +0300
+++ 2.2.1-arc/sender.cfg	2018-09-05 13:44:16.186307157 +0300
@@ -6,15 +6,15 @@
 
 # The SSM will query a BDII to find brokers available.  These details are for the 
 # EGI production broker network
-bdii: ldap://lcg-bdii.cern.ch:2170
-network: PROD
+#bdii: ldap://lcg-bdii.cern.ch:2170
+#network: PROD
 # OR (these details will only be used if the broker network settings aren't used)
-#host: test-msg01.afroditi.hellasgrid.gr
+#host: test-msg02.afroditi.hellasgrid.gr
 #port: 6163
 
 # broker authentication.  If use_ssl is set, the certificates configured
 # in the mandatory [certificates] section will be used. 
-use_ssl: true
+use_ssl: false
 
 
 ################################################################################
@@ -36,13 +36,13 @@
 [messaging]
 
 # Queue to which SSM will send messages
-destination: 
+destination: /queue/global.accounting.cputest.CENTRAL
 
 # Outgoing messages will be read and removed from this directory.
 path: /var/spool/apel/outgoing
 
 [logging]
-logfile: /var/log/apel/ssmsend.log
+logfile: /var/spool/arc/ssm/ssmsend.log
 # Available logging levels:
 # DEBUG, INFO, WARN, ERROR, CRITICAL
 level: INFO
diff -ur 2.2.1-orig/ssm2.py 2.2.1-arc/ssm2.py
--- 2.2.1-orig/ssm2.py	2018-05-14 16:00:55.000000001 +0300
+++ 2.2.1-arc/ssm2.py	2018-09-05 13:44:16.187307133 +0300
@@ -16,6 +16,8 @@
    @author: Will Rogers
 '''
 
+from __future__ import absolute_import
+
 # It's possible for SSM to be used without SSL, and the ssl module isn't in the
 # standard library until 2.6, so this makes it safe for earlier Python versions.
 try:
@@ -24,7 +26,7 @@
     # ImportError is raised later on if SSL is actually requested.
     ssl = None
 
-from ssm import crypto
+from . import crypto
 from dirq.QueueSimple import QueueSimple
 from dirq.queue import Queue
 
@@ -238,7 +240,7 @@
         if 'application/pkcs7-mime' in text or 'application/x-pkcs7-mime' in text:
             try:
                 text = crypto.decrypt(text, self._cert, self._key)
-            except crypto.CryptoException, e:
+            except crypto.CryptoException as e:
                 error = 'Failed to decrypt message: %s' % e
                 log.error(error)
                 return None, None, error
@@ -246,7 +248,7 @@
         # always signed
         try:
             message, signer = crypto.verify(text, self._capath, self._check_crls)
-        except crypto.CryptoException, e:
+        except crypto.CryptoException as e:
             error = 'Failed to verify message: %s' % e
             log.error(error)
             return None, None, error
@@ -326,7 +328,7 @@
         try:
             # Remove empty dirs and unlock msgs older than 5 min (default)
             self._outq.purge()
-        except OSError, e:
+        except OSError as e:
             log.warn('OSError raised while purging message queue: %s', e)
 
     ############################################################################
@@ -388,10 +390,10 @@
             try:
                 self.start_connection()
                 break
-            except ConnectFailedException, e:
+            except ConnectFailedException as e:
                 # ConnectFailedException doesn't provide a message.
                 log.warn('Failed to connect to %s:%s.', host, port)
-            except Ssm2Exception, e:
+            except Ssm2Exception as e:
                 log.warn('Failed to connect to %s:%s: %s', host, port, e)
 
         if not self.connected:
@@ -478,7 +480,7 @@
                 f.write(str(os.getpid()))
                 f.write('\n')
                 f.close()
-            except IOError, e:
+            except IOError as e:
                 log.warn('Failed to create pidfile %s: %s', self._pidfile, e)
 
         self.handle_connect()
@@ -494,7 +496,7 @@
                     os.remove(self._pidfile)
                 else:
                     log.warn('pidfile %s not found.', self._pidfile)
-            except IOError, e:
+            except IOError as e:
                 log.warn('Failed to remove pidfile %s: %e', self._pidfile, e)
                 log.warn('SSM may not start again until it is removed.')
         
diff -ur 2.2.1-orig/ssmsend.in 2.2.1-arc/ssmsend.in
--- 2.2.1-orig/ssmsend.in	2018-05-14 16:00:55.000000001 +0300
+++ 2.2.1-arc/ssmsend.in	2018-09-08 13:14:30.983453275 +0300
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!@PYTHON@
 
 #   Copyright (C) 2012 STFC
 #
@@ -19,27 +19,39 @@
 @author: Will Rogers
 '''
 
-from ssm import __version__, set_up_logging, LOG_BREAK
-from ssm.ssm2 import Ssm2, Ssm2Exception
-from ssm.crypto import CryptoException
-from ssm.brokers import StompBrokerGetter, STOMP_SERVICE, STOMP_SSL_SERVICE
+from __future__ import print_function
 
-import logging.config
-import ldap
 import sys
 import os
+
+# ARC-prefix path in PYTHONPATH
+arc_prefix_pythonpath = '@PYTHON_SITE_ARCH@'.replace('${prefix}', '@prefix@')
+if os.path.isdir(arc_prefix_pythonpath):
+    if arc_prefix_pythonpath not in sys.path:
+        sys.path.insert(1, arc_prefix_pythonpath)
+
+from arc.ssm import __version__, set_up_logging, LOG_BREAK
+from arc.ssm.ssm2 import Ssm2, Ssm2Exception
+from arc.ssm.crypto import CryptoException
+from arc.ssm.brokers import StompBrokerGetter, STOMP_SERVICE, STOMP_SSL_SERVICE
+
+import logging.config
+import ldap
 from optparse import OptionParser
-import ConfigParser
+try:
+    import configparser as ConfigParser
+except ImportError:
+    import ConfigParser
 
 
-def main():
+def main(_host, _port, _topic, _key, _cert, _cadir, _message_path, _use_ssl):
     '''
     Set up connection, send all messages and quit.
     '''
     ver = "SSM %s.%s.%s" % __version__
     op = OptionParser(description=__doc__, version=ver)
     op.add_option('-c', '--config', help='location of config file', 
-                          default='/etc/apel/sender.cfg')
+                          default="%s/arc/ssm/sender.cfg" % arc_prefix_pythonpath)
     op.add_option('-l', '--log_config', 
                         help='location of logging config file (optional)', 
                         default='/etc/apel/logging.cfg')
@@ -56,9 +68,9 @@
             set_up_logging(cp.get('logging', 'logfile'), 
                            cp.get('logging', 'level'),
                            cp.getboolean('logging', 'console'))
-    except (ConfigParser.Error, ValueError, IOError), err:
-        print 'Error configuring logging: %s' % str(err)
-        print 'The system will exit.'
+    except (ConfigParser.Error, ValueError, IOError) as err:
+        print('Error configuring logging: %s' % str(err))
+        print('The system will exit.')
         sys.exit(1)
     
     log = logging.getLogger('ssmsend')
@@ -70,30 +82,30 @@
         bdii_url = cp.get('broker','bdii')
         log.info('Retrieving broker details from %s ...', bdii_url)
         bg = StompBrokerGetter(bdii_url)
-        use_ssl = cp.getboolean('broker', 'use_ssl')
+        use_ssl = _use_ssl
         if use_ssl:
             service = STOMP_SSL_SERVICE
         else:
             service = STOMP_SERVICE
         brokers = bg.get_broker_hosts_and_ports(service, cp.get('broker','network'))
         log.info('Found %s brokers.', len(brokers))
-    except ConfigParser.NoOptionError, e:
+    except ConfigParser.NoOptionError as e:
         try:
-            host = cp.get('broker', 'host')
-            port = cp.get('broker', 'port')
+            host = _host
+            port = _port
             brokers = [(host, int(port))]
         except ConfigParser.NoOptionError:
             log.error('Options incorrectly supplied for either single broker or \
                     broker network.  Please check configuration')
             log.error('System will exit.')
             log.info(LOG_BREAK)
-            print 'SSM failed to start.  See log file for details.'
+            print('SSM failed to start.  See log file for details.')
             sys.exit(1)
-    except ldap.LDAPError, e:
+    except ldap.LDAPError as e:
         log.error('Could not connect to LDAP server: %s', e)
         log.error('System will exit.')
         log.info(LOG_BREAK)
-        print 'SSM failed to start.  See log file for details.'
+        print('SSM failed to start.  See log file for details.')
         sys.exit(1)
         
     if len(brokers) == 0:
@@ -118,16 +130,16 @@
             destination = cp.get('messaging', 'destination')
             if destination == '':
                 raise Ssm2Exception('No destination queue is configured.')
-        except ConfigParser.NoOptionError, e:
+        except ConfigParser.NoOptionError as e:
             raise Ssm2Exception(e)
     
         sender = Ssm2(brokers, 
-                   cp.get('messaging','path'),
-                   cert=cp.get('certificates','certificate'),
-                   key=cp.get('certificates','key'),
-                   dest=cp.get('messaging','destination'),
-                   use_ssl=cp.getboolean('broker','use_ssl'),
-                   capath=cp.get('certificates', 'capath'),
+                   _message_path,
+                   cert=_cert,
+                   key=_key,
+                   dest=_topic,
+                   use_ssl=_use_ssl,
+                   capath=_cadir,
                    enc_cert=server_cert,
                    verify_enc_cert=verify_server_cert)
         
@@ -138,11 +150,11 @@
         else:
             log.info('No messages found to send.')
         
-    except (Ssm2Exception, CryptoException), e:
-        print 'SSM failed to complete successfully.  See log file for details.'
+    except (Ssm2Exception, CryptoException) as e:
+        print('SSM failed to complete successfully.  See log file for details.')
         log.error('SSM failed to complete successfully: %s', e)
-    except Exception, e:
-        print 'SSM failed to complete successfully.  See log file for details.'
+    except Exception as e:
+        print('SSM failed to complete successfully.  See log file for details.')
         log.error('Unexpected exception in SSM: %s', e)
         log.error('Exception type: %s', e.__class__)
 
@@ -157,4 +169,9 @@
         
     
 if __name__ == '__main__':
-    main()
+    if (len(sys.argv) != 9):
+        print("Usage: python ssmsend <hostname> <port> <topic> <key-path> <cert-path> <cadir-path> <path-to-messages-files> <use_ssl>")
+        sys.exit(1)
+
+    main(sys.argv[1], sys.argv[2], sys.argv[3], sys.argv[4], sys.argv[5], sys.argv[6], sys.argv[7], sys.argv[8])
+    sys.exit(0)

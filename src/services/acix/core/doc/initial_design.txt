Title  : Using bloom filters for fast cache indexes in ARC
Author : Gerd Behrmann
Created: June 23rd, 2009


Overview
--------

We seek to reintroduce cache aware job brokering in ARC. This feature
used to be available with RLS. The grid manager would register cached
files in RLS, allowing a job broker to submit a job to a CE that has
cached the file. This feature was lost when we moved away from RLS.

This document outlines an approach using cache index servers and bloom
filters. We identify three actors in the system:

CE: Servers containing cached files

   These will typically be the servers running the grid
   manager.

JB: Clients

   These will typically be job brokers. Could be ngsub or the
   ARC/Atlas control tower.

CI: Cache indexers

   These are servers indexing the files cached at a CE. JBs can query
   cache indexers to learn about where files are cached.


Cached files are identified by a name; we have to decide whether to
used the LFN or the PFN, but the LFN is probably best.


The state on a CI is not permanent. Upon restart the information is
fetched from all CEs. As the cache content on CEs change, the index on
CIs are updated.

To reduce the index size, two optimisations are made:

1. Rather than transfering a full index, the CE constructs a bloom
   filter of the cache index and only the bloom filter is transferred
   to the cache indexer.

2. Rather than retransmitting the complete bloom filter upon every
   change, change records are transmitted to the CI. The CI updates
   the bloom filter by adding (ORing) the new bits into the CI. As
   entries cannot be removed from a bloom filter, cache deletions are
   not immediately propagated to the CI. Instead the complete bloom
   filter is periodically retransmitted.


These two optimisations have a number of consequences:

1. The filter content is not secret. At most an attacker could learn
   that a file is possibly cached at a site, but it is impossible to
   extract a list of files from the bloom filter.

2. As the filter is not secret, a CI requires no authorisation to talk
   to a CE.

3. Likewise a JB requires no authorisation to talk to a CE.

4. Additions to the cache are immediately registered in the CI.

5. As bloom filters may generate false positives, as can a CI.

6. Deletions from the cache are not immediately registered in the
   CI. This may add addition false positives.


Other advantages:

1. Any number of CIs can be created.

2. We can use DNS round robin between CIs.


Pull vs push
------------

This document favors that a CI pulls information from a CE. The
reasoning is that this minimises the amount of configuration needed on
a CE. It also eliminates the need for authorising the CI.

The CI may require the CE to authenticate itself to avoid that an
attacker can poison the index. However even if the index becomes
poisoned, the worst that can happen is that a JB sends a job to a
cluster where the file is not cached.


HTTP
----

This document advocates that HTTP GET is used for CI-CE communication
and JB-CI communication. Should it be necessary to authenticate the CE
to the CI, or the CI to the JB, then HTTPS may be used.


The exact protocol is not defined by this document. We should be able
to change the protocol, so care should be taken to allow for
versioning.



Size of bloom filters
---------------------

The precision of the bloom filter must be negotiable between CI and
CE. The suggested procedure is for the CI to request a certain
precision when fetching the bloom filter from the CE. The CE may
choose to honor the requested precision or it may choose to provide a
different precision. The reply from the CE should contain the
estimated precision, as should the reply from the CI to the JB.



Hash functions
--------------

The CI and CE have to agree on the hash functions used. As the optimal
number of hash functions depends on the number of entries and the
precision, we need a scheme in which an arbitrary number of hash
functions can be created.




CI as a library
---------------

It would be nice if the CI can be embedded as a library. Large job
brokers (like the ATLAS/ARC control tower) can then embed a CI rather
than talking to a dedicated CI server.




Open questions
--------------

How does a JB learn about a CI? In the old system with RLS, the JB
knew about the RLS server because the LFN identified it. Since the CI
is independent of any catalogue, this approach can no longer be used.

A possible solution is for the CI to be published in the information
system. 



Josva mentioned private caches in ARC. I don't know the precise
motivation for having them, hence I cannot suggest how we should treat
them.

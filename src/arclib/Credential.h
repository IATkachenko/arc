#ifndef __ARC_CREDENTIAL_H__
#define __ARC_CREDENTIAL_H__
  
namespace ArcLib {
  // An exception class for the Credential class.
  /** This is an exception class that is used to handle runtime errors
    discovered in the Credential class.
   */
class CredentialError : public std::runtime_error {
  public:
    // Constructor
    /** This is the constructor of the CredentialError class.
      @param what An explanation of the error.
     */
    CredentialError(const std::string& what="");
  };


class Credential {
  enum Credformat {PEM, DER, PKCS12, UNKNOWN};

  public:
    /**Constructor*/
    Credential();

    /**Constructor, construct from credential files, this constructor will parse the credential information,
    and put them into "this" */
    Credential(const std::string& cert, const std::string& key, const std::string& cainfo);

  private:
    /**Constructor, construct from key and request, it is just a half-matured credential*/
    Credential(X509_REQ**, EVP_PKEY** key);

    loadKey();
    loadCertificate();
    loadCA();

  /************************************/
  /*****Get the information from "this" object**/
  public:
    
    Credformat getFormat(BIO * in) const;        



  /*************************************/
  /*****General methods for proxy Request, proxy sign********/
  /**Note although we use "proxy" here, the below method can also be used for request and sign for original
  certificate*/

  public:
    /**Make a proxy request, based on the credential information inside "this"
    @param bits  modulus size for RSA key generation, it should be greater than 1024
    @param string which includes the request information, i.e, X509_REQ, which is produced by this method;
    this param is specific for transfering the request to remote end to sign.
    @return the Credential object which includes X509_REQ** and EVP_PKEY** iff successfully make the proxy request,
    otherwise NULL
    */
    Credential* GenerateRequest(std::string& request, int bits = 1024);


    /**Make all of the extensions for proxy certificate.*
    @param name  the name of the extenstion
    @param data  data of the extension
    @return  the extension stucture iff successfully initialize extension
    */
    X509_EXTENSION* GenerateExtension(std::string name, std::string data);


    /**Sign a certificate request, based on the proxy request which is generated by GenerateProxyRequest(),
    and certificate in "this" which is used to sign the proxy*/
    @param req  Credential object which includes X509_REQ* that is generated by GenerateProxyRequest(), the Credential
    object will include the signed certificate, iff successfully gets signing
    @param extensions the extension of the signed certificate
    @param lifetime  lifetime of the proxy certificate
    @param limit  whether give limit constraint for the proxy certificate
    @return  true iff successfully sign the certificate, otherwise false
    bool Sign(Credential* req, STACK_OF(X509_EXTENSION) ** extensions, Period lifetime, bool limit);

    /**Sign a certificate request, based on the proxy request which is generated by GenerateProxyRequest(), 
    and certificate in "this" which is used to sign the proxy*/
    @param req  the request information
    @param extensions the extension of the signed certificate
    @param lifetime  lifetime of the proxy certificate
    @param limit  whether give limit constraint for the proxy certificate
    @return  a string which include the proxy certificate, iff successfully sign the certificate
    std::string Sign(std::string req, STACK_OF(X509_EXTENSION) ** extensions, Period lifetime, bool limit);

    /**Create a proxy certificate, based on the certificate in "this", so it will generate a self-signed proxy certificate.
    This method includes the GenerateProxyRequest, GererateProxyExtension and SignProxy.
    @param lifetime  lifetime of the proxy certificate
    @param limit  whether give limit constraint for the proxy certificate
    @return  a new Credential object
    */
    //Credential* CreateProxy(std::list<AC*> aclist, std::string extra);

    /**Set the certificate information for "this" by using proxy certificate which is return by siging side*/
    //bool SetCertificate(std::string certificate);

    /************************************/
    /*****VOMS specific methods******/
    /**AC is a struct introduced from voms code, which represents the voms attribute extracted from voms server, but
    this structure can also be use for other non-voms attribute, since voms attribute also comply with X.509 certificate
    formate*/
    typedef struct ACC {
      AC_INFO         *acinfo;
      X509_ALGOR      *sig_alg;
      ASN1_BIT_STRING *signature;
    } AC;

  public:
    /**Get the attribute information from voms server(specific method for voms credential)
    the X.509 credential attached to "this" object will be used to secure the communication with
    remote voms server.
    The aclist which is got from voms server will be used as the parameter of CreateProxy() to
    generate the proxy certificate which includes the aclist as certificate extension.
    @param voms_servers  each includes the hostname and port of voms server.
    @param aclist  attributes got from voms servers
    @param extra  some extra information got from voms servers
    @return true iff successfully got the attributes, otherwise false
    */
    bool GetVOMSAttribute(std::list<std::string> voms_servers, std::list<AC*> aclist, std::string extra);


  private:
    // PKI files
    std::string cacertfile;
    std::string cacertdir;
    std::string certfile;
    std::string keyfile;

    //Certificate structures
    X509 *           cert_;    //cert
    EVP_PKEY *       pkey_;    //private key
    STACK_OF(X509) * cert_chain_;  //cert chain
    std::list<X509*> certs_;
    Credformat       format;
    Time         lifetime_;

    //Certificate request
    //X509_REQ** req;
    RSA* rsa_key_;

    //Extensions for certificate, such as certificate policy, attributes, etc/
    STACK_OF(X509_EXTENSION) ** extensions;

    //some properties and AC settings */
    int            bits;
    Period         period; //lifetime of certificate
    Period         ac_period; //lifetime of attribute
    std::string    policyfile;
    std::string    policylang;
    int            pathlength;

  }

}// namespace ArcLib

#endif /* __ARC_CREDENTIAL_H__ */



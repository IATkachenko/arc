#!@PYTHON@

import argparse
import os
import sys
import logging

# ARC-prefix path in PYTHONPATH
arc_prefix_pythonpath = '@PYTHON_SITE_ARCH@'.replace('${prefix}', '@prefix@')
if os.path.isdir(arc_prefix_pythonpath):
    if arc_prefix_pythonpath not in sys.path:
        sys.path.insert(1, arc_prefix_pythonpath)

from arc.utils import config
from arc.control import JuraArchive

# Initialize logging
logger = logging.getLogger('ARC')
logger.setLevel(logging.INFO)
log_handler_stderr = logging.StreamHandler()
log_handler_stderr.setFormatter(
    logging.Formatter('[%(asctime)s] [%(name)s] [%(levelname)s] [%(process)d] [%(message)s]'))
logger.addHandler(log_handler_stderr)


# Define root parser
def get_parser():
    parser = argparse.ArgumentParser(description='NorduGrid ARC Jura Archive Manager')
    parser.add_argument('-c', '--config', action='store',
                        help='Config file location (default is {0})'.format(config.arcconf_defpath()))
    parser.add_argument('-d', '--debug', action='store',
                        help='Verbosity level (default is %(default)s)', default='WARNING',
                        choices=['CRITICAL', 'ERROR', 'WARNING', 'INFO', 'DEBUG'])
    return parser

if __name__ == '__main__':
    # Command line arguments parsing
    args_parser = get_parser()
    cmd_args = args_parser.parse_args()
    logger.setLevel(getattr(logging, cmd_args.debug, 30))
    # Config parsing (archive manager designed to be called by A-REX => runtime config provided)
    config.load_run_config(cmd_args.config)

    # Start logging to file
    logfile = config.get_value('logfile', 'arex/jura/archiving')
    loglevel = config.get_value('loglevel', 'arex/jura/archiving')
    loglevel = [logging.CRITICAL, logging.ERROR, logging.WARNING, logging.INFO, logging.DEBUG, logging.DEBUG][loglevel]

    logger.debug('Initializing logging to file: %s on %s level', logfile, loglevel)
    log_handler_file = logging.FileHandler(logfile)
    log_handler_file.setFormatter(
        logging.Formatter('[%(asctime)s] [%(name)s] [%(levelname)s] [%(process)d] [%(message)s]')
    )
    log_handler_file.setLevel(loglevel)
    logger.addHandler(log_handler_file)

    # Init archive management
    archive_dir = config.get_value('archivedir', 'arex/jura/archiving')
    db_dir = config.get_value('dbdir', 'arex/jura/archiving')
    am = JuraArchive.JuraArchive(archive_dir, db_dir)

    # Process records in Jura archive
    batch_size = config.get_value('batchsize', 'arex/jura/archiving')
    if batch_size is None:
        batch_size = 100
    am.process_records(batch_size)

    # Do cleanup
    archivettl = config.get_value('archivettl', 'arex/jura/archiving')
    if archivettl is not None:
        # TODO: implement records removal
        pass
